{"name":"Play-navigator","body":"## Better router for Play Framework 2.0\r\n\r\n## Instalation\r\n\r\nAdd `play-navigator` to your `project/Build.scala` file\r\n\r\n``` scala\r\nval appDependencies = Seq(\r\n  \"eu.teamon\" %% \"play-navigator\" % \"0.2.0-SNAPSHOT\"\r\n)\r\n\r\nval main = PlayProject(appName, appVersion, appDependencies, mainLang = SCALA).settings(\r\n  resolvers += \"teamon.eu repo\" at \"http://repo.teamon.eu\"\r\n)\r\n```\r\n\r\nDelete `conf/routes` file\r\n\r\nCreate new file `PROJECT_ROOT/app/Routes.scala`:\r\n\r\n``` scala\r\nimport play.navigator.PlayNavigator\r\n\r\ntrait RoutesDefinition extends PlayNavigator {\r\n    // Your routes definition (see below)\r\n}\r\n\r\n\r\n// Below lines are very IMPORTANT\r\npackage controllers {\r\n    object routes extends RoutesDefinition\r\n}\r\n\r\nobject Routes extends RoutesDefinition\r\n```\r\n\r\n## Routes definition\r\n\r\n``` scala\r\n// Basic\r\nval home  = GET   on root       to Application.index\r\nval index = GET   on \"index\"    to Application.index\r\nval about = GET   on \"about\"    to Application.about\r\nval foo   = POST  on \"foo\"      to Application.about\r\nval show  = GET   on \"show\" / * to Application.show\r\nval ws    = GET   on \"ws\"       to Application.ws\r\nval bar   = GET   on \"bar\" / * / * / \"blah\" / * to Application.bar\r\n\r\n// Catches /long/a/b/c/.../z\r\nvar long  = GET   on \"long\" / ** to Application.long\r\n\r\n// Require extension: /ext/{param}.{ext}\r\nGET on \"ext\" / * as \"json\" to Application.extJson\r\nGET on \"ext\" / * as \"xml\"  to Application.extXml\r\n\r\n// REST routes\r\nval todos = resources(\"todos\", Todos)\r\n\r\n// Namespace ...\r\nnamespace(\"api\"){\r\n  namespace(\"v1\"){\r\n    GET on \"index\" to Application.index _\r\n  }\r\n}\r\n\r\n// ... or with reverse routing support\r\nval api = new Namespace(\"api\"){\r\n  val v2 = new Namespace(\"v2\"){\r\n    val about = GET on \"about\" to Application.about _\r\n  }\r\n}\r\n\r\n// and back to top-level namespace\r\nGET   on \"showalt\" / * to Application.show\r\n\r\n// redirect\r\nGET on \"redirect-me\" to redirect(\"http://google.com\")\r\n\r\n// assets\r\nval assets = GET on \"assets\" / ** to { s: String => Assets.at(path=\"/public\", s) }\r\n\r\n```\r\n\r\n`Application` and `Todos` controllers used in example\r\n\r\n``` scala\r\n// app/controllers/Application.scala\r\npackage controllers\r\n\r\nimport play.api.mvc._\r\n\r\nobject Application extends Controller {\r\n\r\n  def index(): Action[_] = Action {\r\n    Ok(\"Applcation.index => \" + routes.index())\r\n  }\r\n\r\n  def about(): Action[_] = Action {\r\n    Ok(\"Application.about => \" + routes.about() + \" or \" + routes.api.v2.about())\r\n  }\r\n\r\n  def show(id: Int): Action[_] = Action {\r\n    Ok(\"Application.show(%d) => %s\" format (id, routes.show(id)))\r\n  }\r\n\r\n  def bar(f: Float, b: Boolean, s: String): Action[_] = Action {\r\n    Ok(\"Application.bar(%f, %b, %s) => %s\" format (f, b, s, routes.bar(f,b,s)))\r\n  }\r\n\r\n  def long(path: String) = Action {\r\n    Ok(\"Application.long(%s)\" format path)\r\n  }\r\n\r\n  def extJson(id: Int) = Action { Ok(\"Application.extJson(%d)\" format id) }\r\n  def extXml(id: String) = Action { Ok(\"Application.extXml(%s)\" format id) }\r\n\r\n  import play.api.libs.iteratee._\r\n\r\n  def ws() = WebSocket.using[String] { request =>\r\n    val in = Iteratee.foreach[String](println).mapDone { _ =>\r\n      println(\"Disconnected\")\r\n    }\r\n\r\n    val out = Enumerator(\"Hello!\")\r\n\r\n    (in, out)\r\n  }\r\n}\r\n\r\n\r\n// app/controllers/Todos.scala\r\npackage controllers\r\n\r\nimport play.api._\r\nimport play.api.mvc._\r\nimport navigator._\r\n\r\nobject Todos extends Controller with PlayResources[Int] {\r\n  def index() = Action { Ok(\"Todos.index => %s\" format routes.todos.index()) }\r\n  def `new`() = Action { Ok(\"Todos.new => %s\" format routes.todos.`new`()) }\r\n  def create() = Action { Ok(\"Todos.create => %s\" format routes.todos.create()) }\r\n  def show(id: Int) = Action { Ok(\"Todos.show(%d) => %s\" format (id, routes.todos.show(id))) }\r\n  def edit(id: Int) = Action { Ok(\"Todos.edit(%d) => %s\" format (id, routes.todos.edit(id))) }\r\n  def update(id: Int) = Action { Ok(\"Todos.update(%d) => %s\" format (id, routes.todos.update(id))) }\r\n  def delete(id: Int) = Action { Ok(\"Todos.delete(%d) => %s\" format (id, routes.todos.delete(id))) }\r\n}\r\n\r\n```\r\n\r\n\r\n## Mountable routers\r\n\r\n``` scala\r\ncase class FirstModule(parent: PlayNavigator) extends PlayModule(parent) with Controller {\r\n  val home = GET on root to first.Application.index\r\n  val foobar = GET on \"foo\" / \"bar\" / * to first.Application.foo\r\n}\r\n\r\ncase class SecondModule(parent: PlayNavigator) extends PlayModule(parent) with Controller {\r\n  val home = GET on root to (() => second.Application.index\r\n  val foobar = GET on \"foo\" / \"bar\" / * to second.Application.foo\r\n}\r\n\r\n// Main router\r\ntrait RoutesDefinition extends PlayNavigator {\r\n    val first = \"first\" --> FirstModule\r\n    val second = \"second\" / \"module\" --> SecondModule\r\n}\r\n```\r\n\r\nGenerated routes:\r\n\r\n```\r\n/first\r\n/first/foo/bar/*\r\n/second/module\r\n/second/module/foo/bar/*\r\n```\r\n\r\nand reverse routing:\r\n\r\n```\r\nroutes.first.home() // => \"/first\"\r\nroutes.first.foo(3) // => \"/first/foo/bar/3\"\r\nroutes.second.home() // => \"/second/module\"\r\nroutes.second.foo(3) // => \"/second/module/foo/bar/3\"\r\n```\r\n\r\n","tagline":"Better router for Play Framework 2.0","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}